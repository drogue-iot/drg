name: Build

on:
  push:
    branches:
      - main
    # Releases are tags named 'v<version>', and must have the "major.minor.micro", for example: "0.1.0".
    # Release candidates are tagged as `v<version>-rc<num>`, for example: "0.1.0-rc1".
    tags:
        - "v*"
  pull_request:

jobs:
  check:
    runs-on: ubuntu-latest
    outputs:
      do-publish: ${{steps.state.outputs.do-publish}}
      release: ${{steps.state.outputs.release}}
      version: ${{steps.version.outputs.version}}
      prerelease: ${{steps.state.outputs.prerelease}}
    steps:
      - name: Evaluate state
        id: state
        shell: bash
        run: |
          test -z "${{github.head_ref}}" && echo "do-publish=true" >> $GITHUB_OUTPUT
          if [[ "${{ github.event.ref }}" =~ ^refs/tags/v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
           echo "release=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event.ref }}" =~ ^refs/tags/v.*$ ]]; then
           echo "release=true" >> $GITHUB_OUTPUT
           echo "prerelease=true" >> $GITHUB_OUTPUT
          fi
      - name: Set version
        id: version
        run: |
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          [ "$VERSION" == "main" ] && VERSION=latest  # main branch
          [ "$VERSION" == "merge" ] && VERSION=latest # PR
          echo VERSION=$VERSION
          echo "version={$VERSION}" >> $GITHUB_OUTPUT
          echo "VERSION=$VERSION" >> $GITHUB_ENV
      - name: Dump state
        run: |
          echo "Tag/version: ${VERSION} / ${{needs.check.outputs.version}}"
          echo "Should we publish artifacts? - do-publish = ${{needs.check.outputs.do-publish}}"
          echo "Release? - release = ${{needs.check.outputs.release}}"
          echo "Pre-release? - prerelease = ${{needs.check.outputs.prerelease}}"

      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-clippy-${{ hashFiles('**/Cargo.lock') }}
      - run: rustup component add clippy
      - uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-features

      - name: Run Rustfmt
        run: cargo fmt -- --check
      - name: Cargo check
        run: cargo check

  build:

    needs:
      - check

    strategy:
      matrix:
        os: [ubuntu-22.04, macos-12, windows-2022]
        include:
          - os: ubuntu-22.04
            suffix: "linux-amd64"
            pkg: "tar.gz"
          - os: macos-12
            suffix: "macos-amd64"
            pkg: "tar.gz"
          - os: windows-2022
            suffix: "windows-amd64"
            exe: ".exe"
            pkg: "zip"
    runs-on: ${{ matrix.os }}

    env:
      VERSION: ${{needs.check.outputs.version}}

    steps:
      - name: Install build tools
        if: ${{ matrix.os == 'ubuntu-22.04' }}
        run: |
          sudo apt-get update; DEBIAN_FRONTEND="noninteractive" sudo apt-get -y install build-essential curl tzdata
          sudo apt install -y libssl-dev pkg-config

      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release

      - name: Prepare release asset
        shell: bash
        run: .github/scripts/package_release.sh "${{matrix.suffix}}" "${{matrix.exe}}" "${{matrix.pkg}}" "${VERSION}"

      - name: Build Windows Installer
        if: ${{ matrix.os == 'windows-2022' }}
        shell: cmd
        #
        # In the following command we add '.0' to the version, as MSI expects a version in the format 'a.b.c.d'.
        # We also switch the version to '0.0.0.0' if it is 'latest'
        #
        run: |
          cd
          dir target\release
          nuget install WiX -version 3.11.2
          set VERSION=%VERSION:latest=0.0.0%
          set VERSION=%VERSION%.0
          echo %VERSION%
          D:\a\drg\drg\WiX.3.11.2\tools\candle -v -dVersion=%VERSION% -arch x64 dist\wix\drg.wxs
          D:\a\drg\drg\WiX.3.11.2\tools\light drg.wixobj -o drg-%VERSION%-${{matrix.suffix}}.msi

      - uses: actions/upload-artifact@v2
        with:
          name: package-${{ matrix.os }}
          if-no-files-found: error
          path: |
            drg-*.tar.gz
            drg-*.zip

      - uses: actions/upload-artifact@v2
        if: ${{ matrix.os == 'windows-2022' }}
        with:
          name: installer-${{ matrix.os }}
          if-no-files-found: error
          path: |
            drg-*.msi

  publish:
    #
    # The publish job will on all branches and tags, except PRs. However, it does only create a release when a
    # tag of the right format is pushed.
    #
    needs:
      - check
      - build
    runs-on: ubuntu-latest
    env:
      VERSION: ${{needs.check.outputs.version}}
    steps:
      - name: Dump state
        run: |
          echo "Tag/version: ${VERSION} / ${{needs.check.outputs.version}}"
          echo "Should we publish artifacts? - do-publish = ${{needs.check.outputs.do-publish}}"
          echo "Release? - release = ${{needs.check.outputs.release}}"
          echo "Pre-release? - prerelease = ${{needs.check.outputs.prerelease}}"

      -  uses: actions/checkout@v3

      - uses: actions/download-artifact@v2
        with:
          path: downloads

      - name: Prepare upload area
        run: |
          mkdir uploads
          mv downloads/package-*/drg-* uploads/
          mv downloads/installer-*/drg-* uploads/

      - name: Check staging content
        run: |
          find uploads

      - name: Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/v')
        with:
          draft: true
          body_path: CHANGELOG.md
          fail_on_unmatched_files: true
          files: |
            uploads/drg-*  
